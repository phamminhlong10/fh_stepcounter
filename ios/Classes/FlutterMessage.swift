// Autogenerated from Pigeon (v17.1.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol FHStepCounterApi {
  func requestPermission() throws
  func checkPermission() throws -> Bool
  func onStart(initialTodayStep: Double) throws
  func getTodayStep() throws -> [String: Double]?
  func getRecords() throws
  func stop() throws
  func pause() throws
  func clearData() throws
  func logout() throws
  func isRecording() throws -> Bool
  func getPauseSteps() throws -> Int64
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class FHStepCounterApiSetup {
  /// The codec used by FHStepCounterApi.
  /// Sets up an instance of `FHStepCounterApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: FHStepCounterApi?) {
    let requestPermissionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.fh_stepcounter.FHStepCounterApi.requestPermission", binaryMessenger: binaryMessenger)
    if let api = api {
      requestPermissionChannel.setMessageHandler { _, reply in
        do {
          try api.requestPermission()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      requestPermissionChannel.setMessageHandler(nil)
    }
    let checkPermissionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.fh_stepcounter.FHStepCounterApi.checkPermission", binaryMessenger: binaryMessenger)
    if let api = api {
      checkPermissionChannel.setMessageHandler { _, reply in
        do {
          let result = try api.checkPermission()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      checkPermissionChannel.setMessageHandler(nil)
    }
    let onStartChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.fh_stepcounter.FHStepCounterApi.onStart", binaryMessenger: binaryMessenger)
    if let api = api {
      onStartChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let initialTodayStepArg = args[0] as! Double
        do {
          try api.onStart(initialTodayStep: initialTodayStepArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      onStartChannel.setMessageHandler(nil)
    }
    let getTodayStepChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.fh_stepcounter.FHStepCounterApi.getTodayStep", binaryMessenger: binaryMessenger)
    if let api = api {
      getTodayStepChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getTodayStep()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getTodayStepChannel.setMessageHandler(nil)
    }
    let getRecordsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.fh_stepcounter.FHStepCounterApi.getRecords", binaryMessenger: binaryMessenger)
    if let api = api {
      getRecordsChannel.setMessageHandler { _, reply in
        do {
          try api.getRecords()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getRecordsChannel.setMessageHandler(nil)
    }
    let stopChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.fh_stepcounter.FHStepCounterApi.stop", binaryMessenger: binaryMessenger)
    if let api = api {
      stopChannel.setMessageHandler { _, reply in
        do {
          try api.stop()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopChannel.setMessageHandler(nil)
    }
    let pauseChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.fh_stepcounter.FHStepCounterApi.pause", binaryMessenger: binaryMessenger)
    if let api = api {
      pauseChannel.setMessageHandler { _, reply in
        do {
          try api.pause()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pauseChannel.setMessageHandler(nil)
    }
    let clearDataChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.fh_stepcounter.FHStepCounterApi.clearData", binaryMessenger: binaryMessenger)
    if let api = api {
      clearDataChannel.setMessageHandler { _, reply in
        do {
          try api.clearData()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      clearDataChannel.setMessageHandler(nil)
    }
    let logoutChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.fh_stepcounter.FHStepCounterApi.logout", binaryMessenger: binaryMessenger)
    if let api = api {
      logoutChannel.setMessageHandler { _, reply in
        do {
          try api.logout()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      logoutChannel.setMessageHandler(nil)
    }
    let isRecordingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.fh_stepcounter.FHStepCounterApi.isRecording", binaryMessenger: binaryMessenger)
    if let api = api {
      isRecordingChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isRecording()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isRecordingChannel.setMessageHandler(nil)
    }
    let getPauseStepsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.fh_stepcounter.FHStepCounterApi.getPauseSteps", binaryMessenger: binaryMessenger)
    if let api = api {
      getPauseStepsChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getPauseSteps()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getPauseStepsChannel.setMessageHandler(nil)
    }
  }
}
